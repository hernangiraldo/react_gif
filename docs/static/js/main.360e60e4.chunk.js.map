{"version":3,"sources":["components/UI/GifExpertHeader/GifExpertHeader.jsx","components/UI/AppWrapper/AppWrapper.jsx","components/UI/AddCategory/AddCategory.jsx","components/UI/EmptyData/EmptyData.jsx","components/Home/GifGridItem/GifGridItem.jsx","helpers/getGifList.js","components/Home/GifGrid/GifGrid.jsx","hooks/useFetchGifList.js","screens/Home/Home.jsx","index.js"],"names":["GifExpertHeader","AppWrapper","props","className","children","AddCategory","setCategories","useState","inputValue","setInputValue","handleOnSubmit","e","preventDefault","trim","length","cats","key","Date","getTime","value","onSubmit","onChange","event","target","type","onClick","EmptyData","message","defaultProps","GifGridItem","title","url","src","alt","getGifList","category","a","fetch","encodeURI","response","json","data","map","gif","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","list","useFetchGifList","Home","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wTAWeA,G,YARS,WACtB,OACE,gCACE,kDCKSC,G,MARI,SAACC,GAClB,OACE,0BAAMC,UAAU,cACZD,EAAME,Y,cCuCCC,G,MAxCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEjCC,EAFiC,KAErBC,EAFqB,KAInCC,EAAgB,SAACC,GACrBA,EAAEC,kBAEGJ,GAAcA,EAAWK,OAAOC,OAAS,IAI9CR,GAAc,SAAAS,GAAI,OAAK,CAAEC,KAAK,IAAIC,MAAOC,UAAWC,MAAOX,IAAzC,mBAA0DO,OAC5EN,EAAc,MAOhB,OACE,0BAAMN,UAAU,cAAciB,SAAUV,GACtC,2BACEP,UAAU,qBACVkB,SARoB,SAACC,GACzBb,EAAca,EAAMC,OAAOJ,QAQvBK,KAAK,OACLL,MAAOX,IAET,4BACEgB,KAAK,SACLrB,UAAU,6CACVsB,QAASf,GAHX,mBC3BAgB,G,MAAY,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OACE,uBAAGxB,UAAU,aAAcwB,KAQ9BD,EAAUE,aAAe,CACvBD,QAAQ,4BAGKD,QCNAG,G,YATK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OACE,yBAAK5B,UAAU,iDACb,4BAAM2B,GACN,yBAAKE,IAAMD,EAAME,IAAMH,O,uBCNhBI,EAAU,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,sEACDC,MAAM,GAAD,OAHlB,0FAGkB,cAAaC,UAAUH,KAD3B,cAClBI,EADkB,gBAEDA,EAASC,OAFR,uBAEhBC,EAFgB,EAEhBA,KAFgB,kBAGjBA,EAAKC,KAAK,SAAAC,GACf,MAAO,CACLC,GAAID,EAAIC,GACRd,MAAOa,EAAIb,MACXC,IAAKY,EAAIE,OAAOC,iBAAiBf,SAPb,2CAAH,sDCiCRgB,EA5BC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECJH,SAACA,GAAc,IAAD,EAEf5B,mBAAS,CACnCkC,KAAM,GACNO,SAAS,IAJgC,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAiB3C,OAVAC,qBAAW,WACTjB,EAAWC,GACRiB,MAAK,SAAAC,GACJH,EAAS,CACPT,KAAMY,EACNL,SAAS,SAGd,CAAEb,IAEEc,EDX2BK,CAAgBnB,EAAShB,OAA7C0B,EAFkB,EAExBJ,KAAcO,EAFU,EAEVA,QAEtB,OACE,yBAAK7C,UAAU,qCACb,4BAAMgC,EAAShB,OAGb6B,EACI,yCAEA,6BAAS7C,UAAU,kBAET,OAAN0C,QAAM,IAANA,OAAA,EAAAA,EAAQ/B,SACR+B,EAAOH,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,eAAa3B,IAAK2B,EAAIC,IAASD,UEDlDY,EAhBF,WAAO,IAAD,EAEqBhD,mBAAS,IAF9B,mBAETiD,EAFS,KAEGlD,EAFH,KAIjB,OACE,oCACE,kBAAC,EAAD,CAAaA,cAAgBA,IAE3BkD,EAAW1C,OACP0C,EAAWd,KAAI,SAAAP,GAAQ,OAAI,kBAAC,EAAD,CAASnB,IAAKmB,EAASnB,IAAKmB,SAAUA,OACjE,kBAAC,EAAD,QCPZsB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.360e60e4.chunk.js","sourcesContent":["import React from 'react';\nimport './GifExpertHeader.css';\n\nconst GifExpertHeader = () => {\n  return(\n    <header>\n      <h1>Gif Experts App</h1>\n    </header>\n  );\n}\n\nexport default GifExpertHeader;\n","import React from 'react';\nimport './AppWrapper.css';\n\nconst AppWrapper = (props) => {\n  return(\n    <main className='AppWrapper'>\n      { props.children }\n    </main>\n  );\n}\n\nexport default AppWrapper;\n\n\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './AddCategory.scss';\n\nconst AddCategory = ({ setCategories }) => {\n\n  const [ inputValue, setInputValue ] = useState('');\n\n  const handleOnSubmit= (e) => {\n    e.preventDefault();\n\n    if (!inputValue || inputValue.trim().length < 2) {\n      return;\n    }\n\n    setCategories(cats => [{ key: new Date().getTime(), value: inputValue }, ...cats]);\n    setInputValue('');\n  }\n\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n  }\n\n  return(\n    <form className='AddCategory' onSubmit={handleOnSubmit}>\n      <input\n        className='AddCategory__input'\n        onChange={handleInputChange}\n        type=\"text\"\n        value={inputValue}\n      />\n      <button\n        type='submit'\n        className='button button__primary AddCategory__button'\n        onClick={handleOnSubmit}\n      >Add Category</button>\n    </form>\n  );\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './EmptyData.scss';\n\nconst EmptyData = ({ message }) => {\n return(\n   <p className='EmptyData'>{ message }</p>\n )\n}\n\nEmptyData.propTypes = {\n  message: PropTypes.string\n}\n\nEmptyData.defaultProps = {\n  message: `There isn't data to show`\n}\n\nexport default EmptyData;\n","import React from 'react';\n\nimport './GifGridItem.scss';\n\nconst GifGridItem = ({ title, url }) => {\n  return(\n    <div className='GifGridItem animate__animated animate__fadeIn'>\n      <h3>{ title }</h3>\n      <img src={ url } alt={ title }/>\n    </div>\n  );\n}\n\nexport default GifGridItem;\n","const URL = 'https://api.giphy.com/v1/gifs/search?&limit=10&api_key=WCjIbpO15ii4VPDxIqQi8vu0mwiB0HrI';\n\nexport const getGifList = async (category) => {\n  const response = await fetch(`${URL}&q=${encodeURI(category)}`);\n  const { data } = await response.json();\n  return data.map( gif => {\n    return {\n      id: gif.id,\n      title: gif.title,\n      url: gif.images.downsized_medium.url\n    }\n  });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './GifGrid.scss';\nimport GifGridItem from '../GifGridItem/GifGridItem';\nimport { useFetchGifList } from '../../../hooks/useFetchGifList';\n\nconst GifGrid = ({ category }) => {\n\n  const { data: images, loading } = useFetchGifList(category.value);\n\n  return(\n    <div className='animate__animated animate__fadeIn'>\n      <h2>{ category.value }</h2>\n\n      {\n        loading\n          ? <p>Loading...</p>\n          : (\n            <section className='GifGrid__list'>\n              {\n                images?.length &&\n                images.map(gif => <GifGridItem key={gif.id} { ...gif } />)\n              }\n            </section>\n          )\n      }\n    </div>\n  )\n}\n\nGifGrid.propTypes = {\n  category: PropTypes.object.isRequired\n}\n\nexport default GifGrid;\n","import { useEffect, useState } from 'react';\nimport { getGifList } from '../helpers/getGifList';\n\nexport const useFetchGifList = (category) => {\n\n  const [ state, setState ] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect( () => {\n    getGifList(category)\n      .then(list => {\n        setState({\n          data: list,\n          loading: false\n        });\n      });\n  }, [ category ])\n\n  return state;\n\n}\n","import React, { useState } from 'react';\nimport AddCategory from '../../components/UI/AddCategory/AddCategory';\nimport EmptyData from '../../components/UI/EmptyData/EmptyData';\nimport GifGrid from '../../components/Home/GifGrid/GifGrid';\n\nconst Home = () => {\n\n  const [ categories, setCategories ] = useState([]);\n\n  return(\n    <>\n      <AddCategory setCategories={ setCategories } />\n      {\n        categories.length\n          ? categories.map(category => <GifGrid key={category.key} category={category} />)\n          : <EmptyData />\n      }\n    </>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n\nimport GifExpertHeader from './components/UI/GifExpertHeader/GifExpertHeader';\nimport AppWrapper from './components/UI/AppWrapper/AppWrapper';\nimport Home from './screens/Home/Home';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertHeader />\n    <AppWrapper>\n      <Home />\n    </AppWrapper>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}